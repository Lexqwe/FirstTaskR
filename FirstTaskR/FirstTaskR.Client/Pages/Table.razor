@page "/table"
@using Microsoft.AspNetCore.Components.Web
@using System.Net.Http.Json
@using Shared.Data.Tables
@using Shared.Data.UI
@using Radzen.Blazor
@rendermode InteractiveWebAssembly
@inject HttpClient httpClient

<h1>Table</h1>

<RadzenDropDown Data=@Years
                @bind-Value=@Year
                TValue="string"
                Change="@OnFilterChange" />

<RadzenDropDown Data=@Monthes
                @bind-Value=@Month
                TValue="string"
                Change="@OnFilterChange" />

@if (isLoading)
{
    <p>Load...</p>
}
else
{
    <RadzenDataGrid Data=@reports
                    TItem="Report"
                    AllowFiltering="true"
                    AllowPaging="true"
                    PageSize="30">
        <Columns>
            <RadzenDataGridColumn TItem="Report" Property="well" Title="Скважина" />
            <RadzenDataGridColumn TItem="Report" Property="ngdu" Title="НГДУ" />
            <RadzenDataGridColumn TItem="Report" Property="cdng" Title="ЦДНГ" />
            <RadzenDataGridColumn TItem="Report" Property="debitSum" Title="debitSum" />
            <RadzenDataGridColumn TItem="Report" Property="debitAvg" Title="debitAvg" />
            <RadzenDataGridColumn TItem="Report" Property="ee_consumeSum" Title="ee_consumeSum" />
        </Columns>
    </RadzenDataGrid>
}

@code {
    private List<Report> reports = new();
    private List<ObjectType> object_types = new();
    private List<Shared.Data.Tables.Object> objects = new();
    private List<Well> wells = new();
    private List<WellDayHistory> well_day_histories = new();
    private List<WellDayPlan> well_day_plans = new();

    bool isLoading = true;
    private string Month { get; set; } = "---";
    private string Year { get; set; } = "---";

    private List<string> Years = new() {"---", "2024", "2025", "2026" };
    private static readonly Dictionary<string, int> YearValues = new()
    {
        ["---"] = 0,
        ["2024"] = 2024,
        ["2025"] = 2025,
        ["2026"] = 2026
    };

    private List<string> Monthes = new() { "---","Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь" };
    private static readonly Dictionary<string, int> MonthValues = new()
    {
        ["---"] = 0,
        ["Январь"] = 1,
        ["Февраль"] = 2,
        ["Март"] = 3,
        ["Апрель"] = 4,
        ["Май"] = 5,
        ["Июнь"] = 6,
        ["Июль"] = 7,
        ["Август"] = 8,
        ["Сентябрь"] = 9,
        ["Октябрь"] = 10,
        ["Ноябрь"] = 11,
        ["Декабрь"] = 12
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadObjectTypes();
        await LoadObjects();
        await LoadWells();
        await LoadWellDayHistories();
        await LoadWellDayPlans();
        OnFilterChange();
    }

    async Task LoadObjectTypes()
    {
        //object_types = await httpClient.GetFromJsonAsync<List<ObjectType>>("api/ObjectTypes");
        object_types = await httpClient.GetFromJsonAsync<List<ObjectType>>("https://localhost:7184/api/ObjectTypes");
    }

    async Task LoadObjects()
    {
        objects = await httpClient.GetFromJsonAsync<List<Shared.Data.Tables.Object>>("https://localhost:7184/api/Objects");
    }

    async Task LoadWells()
    {
        wells = await httpClient.GetFromJsonAsync<List<Well>>("https://localhost:7184/api/Wells");
    }

    async Task LoadWellDayHistories()
    {
        well_day_histories = await httpClient.GetFromJsonAsync<List<WellDayHistory>>("https://localhost:7184/api/WellDayHistories");
    }

    async Task LoadWellDayPlans()
    {
        well_day_plans = await httpClient.GetFromJsonAsync<List<WellDayPlan>>("https://localhost:7184/api/WellDayPlans");
    }



    private void OnFilterChange()
    {
        isLoading = true;
        reports.Clear();
        StateHasChanged();
        var SelectedPlans = well_day_plans.AsQueryable();
        var SelectedHistories = well_day_histories.AsQueryable();

        int MonthValue = GetMonthValue(Month);
        int YearValue = GetYearValue(Year);

        if (YearValue != 0)
        {
            SelectedPlans = SelectedPlans.Where(h => h.date_plan.Year == YearValue);
            SelectedHistories = SelectedHistories.Where(p => p.date_fact.Year == YearValue);
            if (MonthValue != 0)
            {
                SelectedPlans = SelectedPlans.Where(h => h.date_plan.Month == MonthValue);
                SelectedHistories = SelectedHistories.Where(p => p.date_fact.Month == MonthValue);
            }
        }

        List<int> SelectedWells = SelectedPlans.Select(p => p.well)
                .Concat(SelectedHistories.Select(h => h.well))
                .Distinct()
                .ToList();

        foreach(var item in SelectedWells)
        {
            Report NewReport = new();
            var SelectedWell = wells.Single(w => w.well == item);
            NewReport.well = objects.Single(o => o.id == item).name;
            NewReport.ngdu = objects.Single(o => o.id == SelectedWell.ngdu).name;
            NewReport.cdng = objects.Single(o => o.id == SelectedWell.cdng).name;

            int debitSum = 0;
            int debitAvgCount = 0;
            float ee_consumeSum = 0;
            foreach(var plan in SelectedPlans)
            {
                if(plan.well == item)
                {
                    debitSum += plan.debit;
                    debitAvgCount++;
                    ee_consumeSum += plan.ee_consume;
                }
            }
            foreach (var history in SelectedHistories)
            {
                if (history.well == item)
                {
                    debitSum += history.debit;
                    debitAvgCount++;
                    ee_consumeSum += history.ee_consume;
                }
            }
            NewReport.debitSum = debitSum;
            if (debitAvgCount != 0)
            {
                NewReport.debitAvg = (float)debitSum / debitAvgCount;
            }
            NewReport.ee_consumeSum = ee_consumeSum;
            reports.Add(NewReport);
        }
        isLoading = false;
    }   

    private int GetYearValue(string Year)
    {
        return YearValues.TryGetValue(Year, out int value) ? value : 0;
    }

    private int GetMonthValue(string Month)
    {
        return MonthValues.TryGetValue(Month, out int value) ? value : 0;
    }
}


@*         
в таблице надо будет вывести основную информацию  Месторождение, НГДУ, ЦДНГ и агрегированные данные - 1. 
Суммарный дебит 2. Средний дебит 3. Сумарное потребление э/энергии

агрегацию делать по месяцам с возможностью выбора месяца и года из выпадающего списка

выпадающий список над таблицей можно сделать

либо как тебе удобнее будет *@

